// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Tran Phuoc Anh Quoc",
            "email": "anhquoc18092003@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/delete-user": {
            "delete": {
                "description": "Registers a new user with the provided details. Returns a sign-in response upon successful registration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Delete user",
                "responses": {
                    "200": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signin": {
            "post": {
                "description": "Authenticates the user based on the provided credentials and returns a sign-in response if successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signin a user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully signed in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signout": {
            "post": {
                "description": "Registers a new user with the provided details. Returns a sign-in response upon successful registration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signout a user",
                "responses": {
                    "200": {
                        "description": "User successfully logout",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Registers a new user with the provided details. Returns a sign-in response upon successful registration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signup a new user",
                "responses": {
                    "200": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid user input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/cards": {
            "get": {
                "description": "Fetches a paginated list of cards based on the provided filter parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Retrieve a list of cards",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of cards",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new card based on the provided details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Create a new card",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Card created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/cards/{id}": {
            "get": {
                "description": "Fetches the details of a specific card based on the provided card ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Retrieve a card by its ID",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the card",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found - Event with the specified ID not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a new card based on the provided details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Update a card",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Card updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a new card based on the provided details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Delete a card",
                "responses": {
                    "201": {
                        "description": "Delete updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/io-histories": {
            "get": {
                "description": "Fetches a paginated list of io_histories based on the provided filter parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IOHistory"
                ],
                "summary": "Retrieve a list of io_histories",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of io_histories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/io-histories/entrance": {
            "post": {
                "description": "Fetches a paginated list of cards based on the provided filter parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IOHistory"
                ],
                "summary": "Implement entrance",
                "responses": {
                    "201": {
                        "description": "IOHistory created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/io-histories/exit": {
            "post": {
                "description": "Fetches a paginated list of cards based on the provided filter parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IOHistory"
                ],
                "summary": "Implement entrance",
                "responses": {
                    "201": {
                        "description": "IOHistory created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have the required permissions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateCardRequest": {
            "type": "object",
            "required": [
                "card_type",
                "expired_date",
                "license_plate",
                "owner_name",
                "rfid",
                "vehicle_type"
            ],
            "properties": {
                "card_type": {
                    "type": "string"
                },
                "expired_date": {
                    "type": "string"
                },
                "license_plate": {
                    "type": "string"
                },
                "owner_name": {
                    "type": "string"
                },
                "rfid": {
                    "type": "string"
                },
                "vehicle_type": {
                    "type": "string"
                }
            }
        },
        "dto.SignInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateCardRequest": {
            "type": "object",
            "required": [
                "card_type",
                "expired_date",
                "id",
                "license_plate",
                "owner_name",
                "rfid",
                "vehicle_type"
            ],
            "properties": {
                "card_type": {
                    "type": "string"
                },
                "expired_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_io_history_id": {
                    "type": "string"
                },
                "license_plate": {
                    "type": "string"
                },
                "owner_name": {
                    "type": "string"
                },
                "rfid": {
                    "type": "string"
                },
                "vehicle_type": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {}
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "GoParking Swagger API",
	Description:      "Swagger API for GoShop.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
