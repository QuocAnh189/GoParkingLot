events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout 65;

    # üî• Cho ph√©p request l·ªõn h∆°n (v√≠ d·ª•: 50MB, c√≥ th·ªÉ tƒÉng l√™n n·∫øu c·∫ßn)
    client_max_body_size 50M;

    server {
        listen 80;
        server_name goparking.duckdns.org;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name goparking.duckdns.org;

        ssl_certificate /etc/letsencrypt/live/goparking.duckdns.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/goparking.duckdns.org/privkey.pem;

        location / {
            proxy_pass http://parking.api:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;

            # üî• H·ªó tr·ª£ request l·ªõn
            proxy_request_buffering off;

            # üî• Fix l·ªói CORS
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range";

            # X·ª≠ l√Ω preflight request (OPTIONS)
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
    }

    server {
            listen 443 ssl;
            server_name minio.goparking.duckdns.org;  # üî• ƒê·ªïi th√†nh subdomain cho MinIO n·∫øu c·∫ßn

            ssl_certificate /etc/letsencrypt/live/goparking.duckdns.org/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/goparking.duckdns.org/privkey.pem;

            location / {
                proxy_pass http://parking.minio:9001;  # üî• Tr·ªè ƒë·∫øn MinIO (ch·∫°y HTTP)
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;

                # üî• Fix l·ªói CORS cho MinIO
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Expose-Headers "Content-Length,Content-Range";

                # X·ª≠ l√Ω preflight request (OPTIONS)
                if ($request_method = OPTIONS) {
                    return 204;
                }
            }
        }
}
